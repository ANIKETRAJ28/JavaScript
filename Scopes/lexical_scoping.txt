How does JS parses the code?
So, we know that JS is not interpreted, it definetely is hybrid(we get undefined when we try to access the var declared variable before declaring it) i.e compiled + interpreted

So, whenever we try to execute a JS code, JS first parses the whole code, in this parsing phase it assigns scope to variables & functions. Once done, then it reads the code and execute it.
Every variable in the code will be used in one of the following ways-
-> Either it will be getting a value assigned i.e it is used as a target. eg. let x = 10;
-> Or it will be used to retrieve a value i.e it will be used as source. eg. console.log(x);

What JS does is that it will start parsing phase. Outside every thing it maintains global scope, but the moment it goes inside a function it switches the scope and starts maintaining scope of that function.

In the parsing phase JS looks for formal declaration only.
In the parsing phase it only allocate scope, not values of the variable i.e it just allocate memory and don't put values (so initially it is undefined). The moment it goes inside a function, it maintains a new scope as well i.e function scope.


Autoglobals--
In JS, during compilation if it keep on searching the scope of a variable in outer scope & dont't find it,  automatically it considers it as global scope.
